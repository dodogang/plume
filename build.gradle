plugins {
    id "architectury-plugin" version "2.0.68"
    id "forgified-fabric-loom" version "0.6.64" apply false
    id "maven-publish"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "forgified-fabric-loom"

    dependencies {
        minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
        mappings("net.fabricmc:yarn:${rootProject.yarn_version}:v2")

        ext.dependOnModule = { path ->
            compileOnly(project(path: path)) {
                transitive = false
            }
        }

        ext.dependOnModuleFromFabric = { path ->
            runtimeOnly(project(path: path, configuration: "transformDevelopmentFabric")) {
                transitive = false
            }
            shadow(project(path: path, configuration: "transformProductionFabric")) {
                transitive = false
            }
            ext.dependOnModule(path)
        }

        ext.dependOnModuleFromForge = { path ->
            runtimeOnly(project(path: path, configuration: "transformDevelopmentForge")) {
                transitive = false
            }
            shadow(project(path: path, configuration: "transformProductionForge")) {
                transitive = false
            }
            ext.dependOnModule(path)
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = targetVersion
        }
    }

    java {
        withSourcesJar()
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username = project.hasProperty('modmavenUser') ? project.property('modmavenUser') : System.getenv('MODMAVEN_USER')
                password = project.hasProperty('modmavenApiKey') ? project.property('modmavenApiKey') : System.getenv('MODMAVEN_API_KEY')
            }
            name = "modmaven"
            url = "http://modmaven.dev/artifactory/local-releases"
        }
    }
}